// @flow
/**
 * Flowtype definitions for http-tequilapi-client
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.5.8
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

import type { TequilapiClient } from "./client";
import type { HttpInterface } from "./adapters/interface";
import type { NodeHealthcheckDTO } from "./dto/node-healthcheck";
import type { IdentityDTO } from "./dto/identity";
import type { ConsumerLocationDTO } from "./dto/consumer-location";
import type { ConnectionStatisticsDTO } from "./dto/connection-statistics";
import type { ConnectionIPDTO } from "./dto/connection-ip";
import type { ConnectionStatusDTO } from "./dto/connection-status-dto";
import type { ConnectionRequest } from "./dto/query/connection-request";
import type { IdentityRegistrationDTO } from "./dto/identity-registration/identity-registration";
import type { ProposalQueryOptions } from "./dto/query/proposals-query-options";
import type { ProposalDTO } from "./dto/proposal";
declare export class HttpTequilapiClient mixins TequilapiClient {
  http: HttpInterface;
  constructor(http: HttpInterface): this;
  healthCheck(timeout?: number): Promise<NodeHealthcheckDTO>;
  stop(): Promise<void>;
  identitiesList(): Promise<Array<IdentityDTO>>;
  identityCreate(passphrase: string): Promise<IdentityDTO>;
  identityUnlock(
    id: string,
    passphrase: string,
    timeout?: number
  ): Promise<void>;
  identityRegistration(id: string): Promise<IdentityRegistrationDTO>;
  findProposals(options?: ProposalQueryOptions): Promise<Array<ProposalDTO>>;
  connectionCreate(
    request: ConnectionRequest,
    timeout?: number | void
  ): Promise<ConnectionStatusDTO>;
  connectionStatus(): Promise<ConnectionStatusDTO>;
  connectionCancel(): Promise<void>;
  connectionIP(timeout?: number): Promise<ConnectionIPDTO>;
  connectionStatistics(): Promise<ConnectionStatisticsDTO>;
  location(timeout?: number): Promise<ConsumerLocationDTO>;
}
