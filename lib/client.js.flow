// @flow
/**
 * Flowtype definitions for client
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.5.8
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

import { ConnectionIPDTO } from "./dto/connection-ip";
import { ConnectionStatisticsDTO } from "./dto/connection-statistics";
import { ConnectionStatusDTO } from "./dto/connection-status-dto";
import { ConsumerLocationDTO } from "./dto/consumer-location";
import { IdentityDTO } from "./dto/identity";
import { IdentityRegistrationDTO } from "./dto/identity-registration/identity-registration";
import { NodeHealthcheckDTO } from "./dto/node-healthcheck";
import { ProposalDTO } from "./dto/proposal";
import { ConnectionRequest } from "./dto/query/connection-request";
import { ProposalQueryOptions } from "./dto/query/proposals-query-options";
import { ServiceInfoDTO } from "./dto/service-info";
import { ServiceRequest } from "./dto/service-request";
export interface TequilapiClient {
  healthCheck(timeout?: number): Promise<NodeHealthcheckDTO>;
  stop(): Promise<void>;
  location(timeout?: number): Promise<ConsumerLocationDTO>;
  identitiesList(): Promise<IdentityDTO[]>;
  identityCreate(passphrase: string): Promise<IdentityDTO>;
  identityUnlock(
    id: string,
    passphrase: string,
    timeout?: number
  ): Promise<void>;
  identityRegistration(id: string): Promise<IdentityRegistrationDTO>;
  findProposals(options?: ProposalQueryOptions): Promise<ProposalDTO[]>;
  connectionCreate(
    request: ConnectionRequest,
    timeout?: number
  ): Promise<ConnectionStatusDTO>;
  connectionStatus(): Promise<ConnectionStatusDTO>;
  connectionCancel(): Promise<void>;
  connectionIP(timeout?: number): Promise<ConnectionIPDTO>;
  connectionStatistics(): Promise<ConnectionStatisticsDTO>;
  serviceList(): Promise<ServiceInfoDTO[]>;
  serviceGet(serviceId: string): Promise<ServiceInfoDTO>;
  serviceStart(
    request: ServiceRequest,
    timeout?: number
  ): Promise<ServiceInfoDTO>;
  serviceStop(serviceId: string): Promise<void>;
}
